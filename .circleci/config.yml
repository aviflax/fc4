version: 2

# All the tool_* jobs specify the checkout path, and then set a
# `working_directory` that’s different than the default and is _underneath_ the
# checkout path. This is because it’s a little tricky to get `working_directory`
# and `checkout` to work together when I want the working directory for all
# steps *except* `checkout` to be a subdirectory of the project — because by
# default, `checkout` checks out into the specified `working_directory`. I found
# this solution here: https://stackoverflow.com/a/50570581/7012
tool_job_defaults: &tool_job_defaults
  working_directory: ~/project/tool
  docker:
      # See https://circleci.com/docs/2.0/circleci-images/
    - image: circleci/clojure:openjdk-11-tools-deps-node-browsers

jobs:
   tool_test:
     <<: *tool_job_defaults
     steps:
       - checkout: {path: ~/project}
       - restore_cache:
           keys:
             - test-deps-v1-{{checksum "deps.edn"}}-{{checksum "renderer/package.json"}}-{{checksum "bin/download-test-deps"}}
       - run: bin/download-test-deps
       - run: bin/tests-with-coverage
       - save_cache:
          key: test-deps-v1-{{checksum "deps.edn"}}-{{checksum "renderer/package.json"}}-{{checksum "bin/download-test-deps"}}
          paths: [.cpcache, ~/.m2, ~/.gitlibs, renderer/node_modules]
       - store_test_results: {path: target/test-results}
       - store_artifacts: {path: target/coverage}
       - run:
          name: Upload test coverage report to Codecov
          # Occasionally Codecov is down or unreachable and this step fails. If it does, we don’t
          # want the job to fail; this step is optional.
          command: bash <(curl -s https://codecov.io/bash) || echo Codecov upload failed

   tool_clj_lint:
     <<: *tool_job_defaults
     steps:
       - checkout: {path: ~/project}
       - restore_cache: {keys: ['clj-lint-deps-v1-{{checksum "deps.edn"}}']}
       - run: clojure -A:lint # downloads deps if needed
       - save_cache:
          key: clj-lint-deps-v1-{{checksum "deps.edn"}}
          paths: [.cpcache, ~/.m2, ~/.gitlibs]

   # Kibit is is a static code analyzer for Clojure. It searches for patterns of code that could be
   # rewritten with a more idiomatic style. https://github.com/jonase/kibit
   tool_kibit:
     <<: *tool_job_defaults
     steps:
       - checkout: {path: ~/project}
       - restore_cache: {keys: ['kibit-deps-v1-{{checksum "deps.edn"}}']}
       - run: clojure -A:kibit # downloads deps if needed
       - save_cache:
          key: kibit-deps-v1-{{checksum "deps.edn"}}
          paths: [.cpcache, ~/.m2, ~/.gitlibs]

   tool_build_dist_pkg:
     <<: *tool_job_defaults
     steps:
       - checkout: {path: ~/project}
       - restore_cache:
           keys:
             - pkg-deps-v1-{{checksum "deps.edn"}}-{{ checksum "renderer/package.json" }}-{{checksum "bin/download-pkg-deps"}}
       - run: bin/download-pkg-deps
       - run:
           name: Create distribution packages
           command: |
             export GIT_HEAD_SHA=$(git rev-parse --short HEAD)
             bin/pkg-all
             mkdir -p ~/workspace/packages
             mv target/pkg/*.gz ~/workspace/packages/
       - persist_to_workspace: {root: ~/workspace, paths: [packages]}
       - store_artifacts: {path: ~/workspace/packages}
       - save_cache:
           key: pkg-deps-v1-{{checksum "deps.edn"}}-{{ checksum "renderer/package.json" }}-{{checksum "bin/download-pkg-deps"}}
           # ~/.npm is needed here because that is (or includes) npm’s cache, and that’s where pkg
           # downloads the built node runtimes for various platforms.
           paths: [.cpcache, ~/.m2, ~/.gitlibs, ~/.npm, ~/node_modules]

   tool_test_dist_pkg:
     docker:
       # The test renders failed (Chrome crashed) when we used the tag `11-browsers` tag but succeed
       # when we use `11-stretch-browsers` — not sure why. Debian and Chrome are both a little newer
       # (as of this writing) in the `-stretch-` tag so that probably accounts for it.
       - image: circleci/openjdk:11-stretch-browsers
     working_directory: ~/test/test-renders
     steps:
       - checkout: {path: ~/project} # only so we can access the test diagram YAML file
       - attach_workspace: {at: ~/workspace} # so we can access the distribution package that was built in tool_build_dist_pkg
       - run:
           name: Extract tool from distribution package
           command: tar -xzv -f ~/workspace/packages/fc4-tool-linux-*.tar.gz -C /tmp
       - run:
           name: Move test diagram YAML into place
           command: mv ~/project/tool/test/data/structurizr/express/diagram_valid_messy.yaml test-render-1.yaml
       - run:
           name: Render the diagram with the default renderer  # See https://github.com/FundingCircle/fc4-framework/projects/2
           command: /tmp/fc4/fc4 --render test-render-1.yaml && mv test-render-1.png test-render-default.png
       - run:
           name: Render the diagram with the stable renderer  # See https://github.com/FundingCircle/fc4-framework/projects/2
           command: /tmp/fc4/fc4 --render --tmp-renderer=stable test-render-1.yaml && mv test-render-1.png test-render-stable.png
       - run:
           name: Render the diagram with the experimental renderer # See https://github.com/FundingCircle/fc4-framework/projects/2
           command: /tmp/fc4/fc4 --render --tmp-renderer=experimental test-render-1.yaml && mv test-render-1.png test-render-experimental.png
       - store_artifacts: {path: ~/test/test-renders}

   tool_publish_dist_pkg:
     docker:
       # Note: for reasons that are unclear, the image used here should be fairly similar to the one
       # used by tool_build_dist_pkg. I tried using `alpine:3.10` but it seems that environment was
       # just too different from the one used in tool_build_dist_pkg, as the attach_workspace step
       # was failing. (There’s a good chance any circleci image using Debian would work, but I
       # figure we may as well use the same one as we’ve already used in a few prior jobs, because
       # there’s a decent chance (I’d think) that its layers will already be cached.)
       - image: circleci/openjdk:11-stretch-browsers
     steps:
       - attach_workspace: {at: ~/workspace}
       - run: |
           [ "$GITHUB_TOKEN" ] || { echo 'GITHUB_TOKEN is not set!' && exit 1; }
       - restore_cache: {keys: [ghr_v0.12.2_linux_amd64]}
       - run:
           name: Download and unpack ghr
           command: |
             if [ -x ~/bin/ghr ]; then exit 0; fi
             wget https://github.com/tcnksm/ghr/releases/download/v0.12.2/ghr_v0.12.2_linux_amd64.tar.gz
             tar -xzf ghr_v0.12.2_linux_amd64.tar.gz --strip-components 1 ghr_v0.12.2_linux_amd64/ghr
             mkdir -p ~/bin
             mv ghr ~/bin/ghr
       - save_cache:
           key: ghr_v0.12.2_linux_amd64
           paths: [~/bin]
       - run:
           name: Create GitHub Release and upload distribution packages to it
           # Docs for ghr’s options: https://github.com/tcnksm/ghr/#options
           command: |
             if [[ $CIRCLE_BRANCH == "master" ]]; then
               # Tag has build num suffix in case we do multiple releases on a given day.
               TAG="release_$(date "+%Y-%m-%d")_${CIRCLE_BUILD_NUM}"
             else
               # We need this to be the same across all builds for a branch so we only ever keep the
               # latest tag+release for a given branch, or we’d have way too many tags+branches.
               TAG="prerelease_${CIRCLE_BRANCH}"
             fi
             ~/bin/ghr -t $GITHUB_TOKEN \
                       -u $CIRCLE_PROJECT_USERNAME \
                       -r $CIRCLE_PROJECT_REPONAME \
                       -c $CIRCLE_SHA1 \
                       $(if [[ ! $CIRCLE_BRANCH == "master" ]]; then echo -prerelease -recreate; fi) \
                       $TAG \
                       ~/workspace/packages

   lint_prose:
     docker:
       - image: jdkato/vale
     steps:
       - checkout
       - run:
           name: Run Vale
           command: |
             # in this image vale is in the root of the fs and for some reason is not in the PATH
             export PATH="/:$PATH"
             bin/lint-prose

   lint_markdown:
     docker:
       - image: pipelinecomponents/markdownlint
     steps:
       - checkout
       - run: bin/lint-markdown

workflows:
  version: 2
  tool:
    jobs:
      - lint_prose
      - lint_markdown
      - tool_test
      - tool_clj_lint
      - tool_kibit
      - tool_build_dist_pkg
      - tool_test_dist_pkg: {requires: [tool_build_dist_pkg]}
      - tool_publish_dist_pkg: {requires: [tool_test, tool_test_dist_pkg]}
