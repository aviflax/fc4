#!/usr/bin/env bash

## This script is meant to be included in distribution packages and installed on
## end-users’ systems. It is for running compiled and packaged versions of fc4.

# We don’t use set -e here because at the bottom of the script there’s an error case we want to
# catch and handle “ourselves”.

SCRIPT_DIR="${BASH_SOURCE%/*}"

# Java options that we know work on Java 8+
JAVA_OPTS=()

# This was originally introduced for obscure technical reasons related to the old, since-removed,
# Node renderer, which was executed as a separate process (at the OS level) and the IPC was impacted
# by the OS’s default character encoding setting, which we had to override. *That* reason for this
# setting no longer applies, but I’m keeping it around for now because I kinda like the idea of the
# tool using UTF8 no matter what, because some OS’s do use ASCII as their default character encoding
# setting, and I want YAML files containing “extended Unicode characters” (e.g. emoji) to be read
# correctly. This may be naive and problematic and may need to be revisited at some point.
JAVA_OPTS+=('-Dfile.encoding=UTF8')

# Prevent the Java app icon from popping up and grabbing focus on MacOS.
JAVA_OPTS+=('-Dapple.awt.UIElement=true') # Java 8, I think.
JAVA_OPTS+=('-Djava.awt.headless=true') # Java 9+, I think. Certainly 11+.

# Java options that require Java 9+
JAVA_9_OPTS=()

# Prevent Clojure from performing reflective access across modules, and therefore prevent the JVM
# from outputting warnings, as per https://clojure.org/guides/faq#illegal_access
# This is supported by Java >= 9, but prevents Java <= 8 from starting. So there’s some gymnastics
# below to deal with this.
# NB: this option MUST be the last option as long as we’re supporting Java 8 and as long as our
# method of dealing with this is to detect the error and then remove this option from the array to
# try again.
# If you’re wondering why we don’t just preemptively check the version of Java installed and then
# only add this to the array if the installed version is >- 9, it’s because I don’t want to add that
# much overhead to the launching of FC4.
JAVA_9_OPTS+=('--illegal-access=deny')

# This uses tee to pipe stderr from the `java` process to the log file and also back to the stderr
# of the `java` process (I think). That way we can examine the contents of stdout and still have
# them streamed to the user as they’re written. Why? Because if the tool starts successfully then it
# might need/want to write to stderr and expect whatever’s written to actually make it to stderr.
# The downside to this is that if we fail to start the JVM because it’s Java 8 and we’re going to
# try again below, we can’t catch this and retry silently/gracefully — the user will see the error
# and we’ll have to print an explanation for the error.
STDERR_LOG_FILE="${TMPDIR:-/tmp}/err.$$"
java "${JAVA_OPTS[@]}" "${JAVA_9_OPTS[@]}" -jar "$SCRIPT_DIR/fc4.jar" "$@" 2> >(tee "$STDERR_LOG_FILE" >&2)
EXIT=$?

if [[ $EXIT != 0 && $(cat "$STDERR_LOG_FILE") =~ 'Unrecognized option: --illegal-access=deny' ]]; then
  printf "%s\n" 'The error above is probably due to using Java 8 or below.' \
                'The fc4 team recommends you upgrade to Java 9 or above.' \
                'Trying to start fc4 with a set of JVM options that should be compatible with Java 8...'

  # Try again with Java options known to be supported on Java 8
  java "${JAVA_OPTS[@]}" -jar "$SCRIPT_DIR/fc4.jar" "$@"
else
  exit $((EXIT + 0))
fi
